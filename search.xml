<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo + Next + Github 博客搭建</title>
    <url>/2021/06/01/hexo/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<span id="more"></span>

<h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ol>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>GitHub创建个人仓库</li>
<li>生成SSH添加到GitHub</li>
<li>将hexo部署到GitHub</li>
<li>其余补充</li>
</ol>
<h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h3><p>  windows：到git官网上下载,<a href="https://gitforwindows.org/">Download git</a>,下载后会有一个Git Bash的命令行工具</p>
<h3 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h3><p>  Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。<br>  windows：<a href="https://nodejs.org/en/download/">nodejs</a>选择LTS版本就行了。</p>
<h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h3><p>  前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p>
<p>  输入命令：<code>npm install -g hexo-cli</code></p>
<p>  接下来初始化Hexo<br>  <code>hexo init myblog</code></p>
<p>  然后cd进入文件夹 进行安装依赖：<code>npm install</code></p>
<p>  新建完成后，指定文件夹目录下有：</p>
<ul>
<li>node_modules: 依赖包</li>
<li>public：存放生成的页面</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：用来存放你的文章</li>
<li>themes：主题</li>
<li>** _config.yml: 博客的配置文件**</li>
</ul>
<p>  接下来运行hexo<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><br>  Hexo基本就完成了…</p>
<h3 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4. GitHub创建个人仓库"></a>4. GitHub创建个人仓库</h3><p>  进入<a href="https://github.com/">github</a>网站，在gitHub.com中看到一个New repository，新建仓库</p>
<p>  创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。</p>
<p>  点击create repository。</p>
<h3 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5. 生成SSH添加到GitHub"></a>5. 生成SSH添加到GitHub</h3><p>  在git bash中进行如下操作<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><br>  这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户</p>
<p>  可以用以下两条，检查一下你有没有输对<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure></p>
<p>  然后创建SSH,一路回车<br>  <code>ssh-keygen -t rsa -C &quot;youremail&quot;</code></p>
<p>  ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p>
<p>  而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>  把你的id_rsa.pub里面的信息复制进去。</p>
<p>  在gitbash中，查看是否成功 <code>ssh -T git@github.com</code></p>
<h3 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6.将hexo部署到GitHub"></a>6.将hexo部署到GitHub</h3><p>  这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>  YourgithubName就是你的GitHub账户<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></p>
<p>  这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。<br>  <code>npm install hexo-deployer-git --save</code><br>  然后<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>  其中 hexo clean清除了你之前生成的东西，也可以不加。<br>  hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>  hexo deploy 部署文章，可以用hexo d缩写</p>
<p>  这样就可以在网站看到博客了</p>
<p>  另外  ！！！<br>  由于hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。<br>  所以当我们在其他电脑进行操作写作的时候 需要将源文件上传到分支。将分支克隆下来，除了git文件外其他文件进行删除，将之前的源文件复制进来替换，除了.deploy_git不进行复制。复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></p>
<h3 id="7-其余补充"><a href="#7-其余补充" class="headerlink" title="7. 其余补充"></a>7. 其余补充</h3><ul>
<li>新建文章文件夹命令：<code>hexo new page title(新建文章文件夹名称)</code></li>
<li>新建文章命令：<code>hexo new title(新建文章名称)</code></li>
<li>设置文章更新时间：在next主题中找到_config.yml在里面查找 update 会找到一个 updated_at 的属性改为 true 即可。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_meta:</span><br><span class="line">updated_at: true</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>欢迎来到Gslms的博客 !</title>
    <url>/2021/06/01/hello/</url>
    <content><![CDATA[<!-- 欢迎来到Gslms的博客 ! -->

<span id="more"></span>

<p>这是我第一次尝试建立自己的博客，欢迎大家前来参观</p>
]]></content>
  </entry>
  <entry>
    <title>前端记录</title>
    <url>/2021/06/03/web-title/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>
<span id="more"></span>

<h4 id="1-数组扁平化"><a href="#1-数组扁平化" class="headerlink" title="1. 数组扁平化"></a>1. 数组扁平化</h4><p>  题目描述:实现一个方法使多维数组变成一维数组<br>  递归版本：<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function flatter(arr) &#123;</span><br><span class="line">  if (!arr.length) return;</span><br><span class="line">    return arr.reduce(</span><br><span class="line">      (pre, cur) =&gt;</span><br><span class="line">        Array.isArray(cur) ? [...pre, ...flatter(cur)] : [...pre, cur],</span><br><span class="line">      []</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">console.log(flatter([1, 2, [1, [2, 3, [4, 5, [6]]]]]));</span><br></pre></td></tr></table></figure><br>    迭代思路实现：</p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function flatter(arr) &#123;</span><br><span class="line">  if (!arr.length) return;</span><br><span class="line">    while (arr.some((item) =&gt; Array.isArray(item))) &#123;</span><br><span class="line">      arr = [].concat(...arr);</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br><span class="line">console.log(flatter([1, 2, [1, [2, 3, [4, 5, [6]]]]]));</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="2-bind、call、apply-改变this指向-三者的区别"><a href="#2-bind、call、apply-改变this指向-三者的区别" class="headerlink" title="2. bind、call、apply 改变this指向 三者的区别"></a>2. bind、call、apply 改变this指向 三者的区别</h4><p>  三种方法都可以用来改变函数this对象指向的，第一个参数都是this要指向的对象，后面的参数进行传参<br>  demo:<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> var xw = &#123;</span><br><span class="line">  name : &quot;小王&quot;,</span><br><span class="line">  gender : &quot;男&quot;,</span><br><span class="line">  age : 24,</span><br><span class="line">  say : function() &#123;</span><br><span class="line">          alert(this.name + &quot; , &quot; + this.gender + &quot; ,今年&quot; + this.age);                                </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var xh = &#123;</span><br><span class="line">  name : &quot;小红&quot;,</span><br><span class="line">  gender : &quot;女&quot;,</span><br><span class="line">  age : 18</span><br><span class="line">&#125;</span><br><span class="line">xw.say();</span><br></pre></td></tr></table></figure></p>
<p>  改变this指向调用say函数 输出小红的内容</p>
<ol>
<li><p>bind方法<br>由于bind方法返回的是一个函数，所以在执行时需要再进行调用<br><code>xw.say.bind(xh, &#39;传递的参数&#39;)()</code></p>
</li>
<li><p>call方法<br><code>xw.say.call(xh, &#39;传递的参数&#39;)</code></p>
</li>
<li><p>apply方法<br>该方法第二个参数是一个数组，在传递时 使用数组传递<br><code>xw.say.apply(xh, [传递的参数])</code></p>
</li>
</ol>
<h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><pre><code>三个方法都是用来改变this指向的
bind方法返回的是一个函数，需要进行执行来调用 传递参数和call方法一样
call方法和apply方法都是对函数直接进行调用 传递参数不同 apply方法传递的参数是一个数组形式
</code></pre>
<h4 id="3-js实现大文件分片上传的方法"><a href="#3-js实现大文件分片上传的方法" class="headerlink" title="3. js实现大文件分片上传的方法"></a>3. js实现大文件分片上传的方法</h4><pre><code>借助js的Blob对象FormData对象可以实现大文件分片上传的功能，关于Blob和FormData的具体使用方法可以到如下地址去查看
[FormData 对象的使用](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects)
[Blob 对象的使用](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)

以下是实现代码，本例中后端代码使用php来实现，只是演示基本功能，具体一些文件验证逻辑先忽略。
前端代码：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;upload&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;</span><br><span class="line">  &lt;button id=&quot;upload&quot; onClick=&quot;upload()&quot;&gt;upload&lt;/button&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var bytesPerPiece = 1024 * 1024; // 每个文件切片大小定为1MB .</span><br><span class="line">        var totalPieces;</span><br><span class="line">        //发送请求</span><br><span class="line">        function upload() &#123;</span><br><span class="line">            var blob = document.getElementById(&quot;file&quot;).files[0];</span><br><span class="line">            var start = 0;</span><br><span class="line">            var end;</span><br><span class="line">            var index = 0;</span><br><span class="line">            var filesize = blob.size;</span><br><span class="line">            var filename = blob.name;</span><br><span class="line"></span><br><span class="line">            //计算文件切片总数</span><br><span class="line">            totalPieces = Math.ceil(filesize / bytesPerPiece);</span><br><span class="line">            while(start &lt; filesize) &#123;</span><br><span class="line">                end = start + bytesPerPiece;</span><br><span class="line">                if(end &gt; filesize) &#123;</span><br><span class="line">                    end = filesize;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var chunk = blob.slice(start,end);//切割文件    </span><br><span class="line">                var sliceIndex= blob.name + index;</span><br><span class="line">                var formData = new FormData();</span><br><span class="line">                formData.append(&quot;file&quot;, chunk, filename);</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: &#x27;http://localhost:9999/test.php&#x27;,</span><br><span class="line">                    type: &#x27;POST&#x27;,</span><br><span class="line">                    cache: false,</span><br><span class="line">                    data: formData,</span><br><span class="line">                    processData: false,</span><br><span class="line">                    contentType: false,</span><br><span class="line">                &#125;).done(function(res)&#123; </span><br><span class="line"></span><br><span class="line">                &#125;).fail(function(res) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line">                start = end;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>  后端php代码：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">header(&#x27;Access-Control-Allow-Origin:*&#x27;);</span><br><span class="line">header(&quot;Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept&quot;);</span><br><span class="line"></span><br><span class="line">$file = $_FILES[&#x27;file&#x27;];</span><br><span class="line">$filename = $file[&#x27;name&#x27;];</span><br><span class="line">file_put_contents($filename, file_get_contents($file[&#x27;tmp_name&#x27;]), FILE_APPEND);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h4 id="4-Object-key-方法"><a href="#4-Object-key-方法" class="headerlink" title="4. Object.key()方法"></a>4. Object.key()方法</h4><pre><code>Object.keys()方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致

语法： `Object.keys(obj)`

参数：obj要返回其枚举自身属性的对象

返回值：一个表示给定对象的所有可枚举属性的字符串数组。
</code></pre>
]]></content>
  </entry>
</search>
